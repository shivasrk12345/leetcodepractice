# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def sortedListToBST(self, head: ListNode) -> TreeNode:
        nums=[]
        # appending all the nodes values of linkedlist into list of numbers
        while head:
            nums.append(head.val)
            head=head.next

        return self.sortedArrayToBST(nums)    
    
    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:
        if not nums:
            return None
        # calcualting middle element and making it as root (divide strategy)
        mid = len(nums) // 2

        root = TreeNode(nums[mid])
        root.left = self.sortedArrayToBST(nums[:mid])
        root.right = self.sortedArrayToBST(nums[mid+1:])
        return root
