# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    
    '''
    Mysolution
    def __init__(self):
            self.result=[]
     # finding height of a tree       
    def height(self,root):
        if(not root):
            return 0;
        ldepth=self.height(root.left);
        rdepth=self.height(root.right);
        return max(ldepth,rdepth)+1;
    # calculate level by level traversal
    def LevelByLevel(self,root):
        h=self.height(root);
        for i in range(1,h+1):
            li=[]
            li=self.levelOrderTraversal(root,i,li)
            self.result.append(li);
            
    def levelOrderTraversal(self,root,level,li):
        if(not root):
            return None;
        if(level==1):
            li.append(root.val);
        else:
            self.levelOrderTraversal(root.left,level-1,li);
            self.levelOrderTraversal(root.right,level-1,li);
        return li;
            
        
    def findBottomLeftValue(self, root: TreeNode) -> int:
        if(root):
            self.LevelByLevel(root);
            return self.result[-1][0];'''
    #best solution using BFS
    
    def findBottomLeftValue(self, root: TreeNode) -> int:
        queue = [root]
        res = 0
        while queue:
            cur_node = queue.pop(0)
            res = cur_node.val
            if cur_node.right:
                queue.append(cur_node.right)
            if cur_node.left:
                queue.append(cur_node.left)
        return res
            
        
